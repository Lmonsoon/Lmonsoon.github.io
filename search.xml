<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js(1)笔记</title>
      <link href="2021/01/13/js(1)%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/13/js(1)%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>JavaScript笔记<br>一、    简介<br>    js全称为JavaScript，是一种解释性脚本语言，边解释边执行<br>javaScript组成:<br>    ECMAScript语法<br>    DOM文档对象模型(Document Object Model)<br>    BOM浏览器对象模型(Browser Object Model)<br>二、    JS用法<br>        1．    内部js语法:<br>                在head标签中写，<br>                在body底部写<br>                注:尽量让js代码写在body底部，因为代码从上往下执行，如果js代码写在head里，有可能页面还没有加载标签，js代码就已经利用了标签，这个时候会报null</p><pre><code>    2．    引入外部js文件            在head标签中写            在body底部写</code></pre><p>三、    数据类型<br>        1．    声明变量方式: var 变量名 = 值;<br>        2．    数据类型:number    string    boolean  undefined(未定义的)    null obj</p><p>四．    内置函数:<br>        （1）    检测当前变量的数据类型: typeof()<br>        （2）    解析一个字符串，并返回一个整数: parseInt();<br>                注意:只返回第一个数字;<br>        （3）    检测数字是否非法: isNaN();</p><p>五．    引用类型:(重点)<br>        （1）    数组类型: 三种声明方式:<br>                    var a = [1,2];<br>                    var b = new Array();<br>                    var c = new Array(3);<br>        （2）    对象类型:两种声明方式<br>                    var user = {name:”天花板”,age:21};<br>                    var user = new Object();<br>        （3）    JSON类型:  键值对形式存储数据<br>                    声明JSON对象:<br>                    声明JSON数组对象:<br>                    js对象转换成json格式的字符串:<br>                    json格式的字符串转换成json对象:<br>六、    运算符:<br>        1．    算数运算符: + - * / %<br>        2．    逻辑运算符: &amp;&amp; || !<br>        3．    比较运算符: &gt;  &lt;  &gt;=  &lt;=  ==  !=<br>            ===(不仅判断值是否相对，也要判断数据类型是否相等)<br>        4．    自增自减: ++   –<br>        5．    双目运算符: +=  -=  *=  /=  %=<br>七、    条件分支语句、循环语句<br>            if(条件表达式){}else{}<br>            switch(表达式){ case 值: break;}<br>            while(条件表达式){}<br>            do{}while(条件表达式)<br>            for(var i = 0;i&lt;num;i++){}<br>八、    函数(方法)<br>            1．    js声明方法:<br>            （1）    无参无返回值方法: function 方法名(){}<br>            （2）    有参无返回值方法: function 方法名(参数){}<br>            （3）    无参有返回值方法: function 方法名(){ return 值; }<br>            （4）    有参有返回值方法: function 方法名(参数){ return 值; }<br>九、    事件<br>            1．    点击事件用法:<br>            2.  a标签的事件特殊用法:<br>            3．    其他事件:<br>                （1）    onchange:  表单内容改变事件<br>                （2）    onclick:  鼠标左击事件<br>                （3）    onmouseover: 鼠标滑过事件<br>                （4）    onmousemove: 鼠标滑过事件<br>                （5）    onmouseout: 鼠标离开事件<br>                （6）    onkeyup: 键盘弹起事件<br>                （7）    onkeydown: 键盘按下事件<br>                （8）    onload: 预加载事件<br>                onload用法: window.onload = function(){}  只要打开页面，就执行此事件</p><p>十、    js弹框:<br>            1．    警告弹框:  alert(“内容”);<br>            2．    确认弹框:  confirm(“郝老师美不美？”);<br>            3．    文本弹框:  prompt(“问题”,”默认内容”);<br>            点击确定返回输入内容，点击取消返回null<br>九、    js操作DOM元素<br>            1．    js获取dom元素<br>                （1）    根据id获取:<br>                        document.getElementById(“hid”);<br>                （2）    根据class获取:<br>                        document.getElementsByClassName(“hclass”);<br>            2．    js操作DOM的样式、内容、属性<br>                var doc = document.getElementById(“name”);<br>                （1）    js获取标签内容:  doc.innerHTML;<br>                （2）    js获取表单内容:  doc.value;<br>                （3）    js向标签内写入内容:  doc.innerHTML = “新内容”;<br>                （4）    js获取元素背景颜色: doc.stlye.backgroundColor;<br>                （5）    js添加元素样式: doc.style = “color:red;font-size:10px;”;<br>                （6）    js获取元素属性: doc.name;<br>                注: js在获取class的时候， doc.className;<br>                （7）    js添加元素属性: doc.src= “index.html”;<br>            3．    js操作节点<br>                <div><br>                <span>我是原有标签</span><br>                </div><br>                获取页面标签: var div = document.getElementsByTagName(“div”)[0];<br>                （1）    创建元素:  var p = document.createElement(“标签名称”);<br>                （2）    向创建的元素中添加内容:<br>                创建一段文本:  var content = document.createTextNode(“文字”);<br>                将文本添加到标签内:  p.appendChild(content);<br>                将创建的元素添加到页面中:  div.appepndChild();<br>                （3）    删除元素: div.removeChild(p);<br>                （4）    替换元素:<br>                var span = doucment..getElementsByTagName(“span”)[0];//获取页面要替换的元素<br>                //创建一个新的元素<br>                var li = document.createElement(“li”);<br>                var liCon = document.createTextNode(“我是li标签内容”);<br>                li.appendChild(liCon);<br>                div.replaceChild(li,span);//将div中的span替换成了li<br>                （5）    插入元素:<br>                var span = doucment..getElementsByTagName(“span”)[0];//获取一个元素<br>                //创建一个新的元素<br>                var li = document.createElement(“li”);<br>                var liCon = document.createTextNode(“我是li标签内容”);<br>                li.appendChild(liCon);<br>                div.insertBefore(li,span); //将li标签插入到span标签前面<br>十、    时间与Math对象用法:<br>            1．    Math用法:<br>                （1）    随机数用法: Math.random();  产生0<del>1之间的随机数<br>                （2）    向上舍入:  Math.ceil(10.1);  —-&gt;11<br>                （3）    向下舍入:  Math.floor(10.1); —–&gt;10<br>                （4）    四舍五入:  Math.round(9.5); —-&gt;10<br>                （5）    最大值、最小值: Math.max(4,3);–&gt;4    Math.min(4,3);–&gt;3<br>                （6）    次幂:     Math.pow(2,3); —-&gt;8<br>            2．    Date用法:<br>                （1）    获取系统时间:var date = new Date();    //创建时间对象<br>                （2）    获取年:var year = date.getFullYear();<br>                （3）    获取月:    var month = date.getMonth()+1;      月份的取值范围是:0</del>11<br>                （4）    获取日:    var day = date.getDate();<br>                （5）    获取时:    var hours = date.getHours();<br>                （6）    获取分:    var minu = date.getMinutes();<br>                （7）    获取秒:    var sec = date.getSeconds();<br>                （8）    获取星期:    var week = date.getDay();        星期的取值范围:0~6<br>十一、    定时器<br>                  function show(){<br>                 alert(“我是计时器和延时器要执行的方法”);<br>                }<br>                1．    计时器用法:  var inter = setInterval(“show()”,1000);//每1000毫秒调用一次show方法<br>                2．    停止计时器:  clearInterval(inter);//清除名为inter的计时器<br>                3．    延时器用法:  var timeout = setTimeout(“show()”,5000);//经过5000后再执行show方法<br>                4．    停止延时器:  clearTimeout(timeout);<br>十二、    BOM元素<br>                1．    window: 浏览器窗口<br>                （1）    获取屏幕宽高:    screen.availWidth;//宽度     screen.availHeight;//高度<br>                （2）    获取浏览器可用宽高:<br>                宽度:window.innerWidth||document.documentElement.clientWidth|| document.body.clientWidth;<br>                高度:window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;<br>                2．    history:<br>                （1）    让浏览器后退方法: history.back();<br>                （2）    让浏览器前进方法: history.forward();<br>                3．    location<br>                （1）    跳转页面: window.location.href = “新页面地址”;<br>                （2）    刷新页面:window.location.reload();<br>                （3）    获取域名:window.location.hostname;    localhost表示本机地址—-&gt;127.0.0.1<br>                （4）    获取端口:window.location.port;            8080、3306<br>                （5）    获取页面路径:window.location.pathname;<br>                （6）    获取协议:window.location.protocol;        http://或https://</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC是什么？如何触发</title>
      <link href="2020/12/24/BFC%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A6%E5%8F%91/"/>
      <url>2020/12/24/BFC%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p><span style='color:Green;font-size:18px;font-weight:bold'>1.概念</span></p><p><span style='color:red;font-size:16px;font-weight:bold'>BFC(Box Formatting context):</span>Box是CSS布局的对象和基本单位，BFC就是页面上的一个独立的容器，容器里面的子元素不会影响外面的元素。反之亦然。</p><p>BFC布局规则</p><ul><li>内部的BOX会垂直方向放置；</li><li>属于同一个BFC的两个相邻Box的margin会重叠；</li><li>BFC的区域不会和float box重叠；</li><li>是页面上的一个独立的容器，容器里面的子元素不会影响外面的元素。反之亦然；</li><li>计算BFC的高度，浮动元素也参与计算。</li></ul><p><span style='color:Green;font-size:18px;font-weight:bold'>2.触发条件</span></p><p><span style='color:red;font-size:16px;font-weight:bold'>触发条件介绍:</span></p><ol><li>根元素</li><li>浮动元素（元素的float不是none）</li><li>绝对定位元素（元素的 position为 absolute或 fixed）</li><li>行内块元素（元素的display为 inline-block-）</li><li>表格单元格（元素的display为 table-cell，HTML表<br>格单元格默认为该值）</li><li>表格标题（元素的display为 table-caption-，HTML<br>表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 display为 table、 table–row、 table-group-row、 table-header- group、 table-footer-group（分别是 HTML table、<br>row、 tbody、 thead、 tfoot的默认属性）或 inline-<br> table）</li><li>overflow值不为 visible的块元素</li><li>display值为flow-root的元素</li><li>contain值为 layout、 content或 paint的元素</li><li>弹性元素（display为flex或 inline–flex元素的直接子<br>元素）</li><li>网格元素（display为grid或 inline–grid元素的直接<br>子元素）</li><li>多列容器（元素的column-count-或 column-width-<br>不为auto，包括 column-count-为1）</li><li>column–span为all的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准<br>变更， Chrome bug）。</li></ol><p><span style='color:Green;font-size:18px;font-weight:bold'>3.应用场景</span></p><p><span style='color:red;font-size:16px;font-weight:bold'>1.清除浮动；</span></p><p><span style='color:red;font-size:16px;font-weight:bold'>2.阻止Margin重叠；</span></p><p><span style='color:red;font-size:16px;font-weight:bold'>3.阻止元素被浮动元素覆盖；</span></p><p><span style='color:red;font-size:16px;font-weight:bold'>4.自适应两栏布局。</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试（css实现半圆）</title>
      <link href="2020/12/23/%E6%B5%8B%E8%AF%95%EF%BC%88css%E5%AE%9E%E7%8E%B0%E5%8D%8A%E5%9C%86%EF%BC%89/"/>
      <url>2020/12/23/%E6%B5%8B%E8%AF%95%EF%BC%88css%E5%AE%9E%E7%8E%B0%E5%8D%8A%E5%9C%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>原理:左上、右上角是圆角，右下、左下角是直角:左上角、右上角的值为宽和高一样的值，右下角、左下角的值不变（等于0）；另外，因为还要设置高度值为原来高度的一半才是标准的半圆。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 上半圆 */</span></span><br><span class="line"><span class="selector-class">.semi-circle</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">50px</span>; </span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#cb18f8</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>; <span class="comment">/* 左上、右上、右下、左下 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下半圆 */</span></span><br><span class="line"><span class="selector-class">.semi-circle2</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">50px</span>; </span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#cb18f8</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">50px</span>; <span class="comment">/* 左上、右上、右下、左下 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 左半圆 */</span></span><br><span class="line"><span class="selector-class">.semi-circle3</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#cb18f8</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>; <span class="comment">/* 左上、右上、右下、左下 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 右半圆 */</span></span><br><span class="line"><span class="selector-class">.semi-circle4</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#cb18f8</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span>; <span class="comment">/* 左上、右上、右下、左下 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/21/hello-world/"/>
      <url>2020/12/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
